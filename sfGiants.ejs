<html>

<head>
    <style>
        /*Style row formatter contents*/
        #example-table .tabulator-row table {
            vertical-align: middle;
            border-collapse: collapse;
        }

        #example-table .tabulator-row table img {
            border: 2px solid #ccc;
        }

        #example-table .tabulator-row table tr td {
            border: none;
        }

        #example-table .tabulator-row table tr td:first-of-type {
            width: 60px;
        }

        #example-table .tabulator-row table tr td div {
            padding: 5px;
        }
    </style>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <link href="https://unpkg.com/tabulator-tables@4.0.4/dist/css/tabulator_site.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/gh/kstost/ksttool/ksttool.js"></script>
    <script src="https://pixijs.download/v6.1.2/pixi.js"></script>
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
    <script type="text/javascript">
        window.addEventListener('load', async e => {
            let list = <%-JSON.stringify(obj) %>
                getPlayerInfoTable(list);
            hitDirections(list);
            /*
                Parameter "base64" having table image data (type = base64data)
                { id: 1, name: "Player a", avgMPH: "4 weeks", color: "white", image: base64 }
                    makeRow(await strikeZone(list, type))
                    type = ["fastball", "curveball", "slider"......]
                    
                    makeRow에 들어갈 parameter의 형태는 
                    {id : num, name:"aaaa", "avgMPH" :"12.12", "avgSpin":"1212.12", color:"white", image : baes64}; 
                    **baes64 = makeRow(await strikeZone(list, type=="fastball"))
            */
            let cheeseData = [];
            function makeRow(data) {
                cheeseData.push(data);
            }
            let loc = list['player a'].location;
            let ballType = Object.keys(loc).filter(key => !key.startsWith('avg_'));
            for (let i = 0; i < ballType.length; i++) {
                let type = ballType[i];
                if (type !== "Undefined") {
                    let player = "player a";
                    let rowData = {};
                    Object.keys(list).forEach((elem, index) => {
                        if (elem === player) {
                            rowData["id"] = index;
                            rowData["type"] = type;
                            rowData["avgMPH"] = list[player]["pitchInfo"]["avg_rel_speed"]["Fastball"].toFixed(2);
                            rowData["avgSpin"] = list[player]["pitchInfo"]["avg_spin_rate"][type].toFixed(2);
                            rowData["rate"] = `${list[player]["pitchInfo"]["rate"][type].toFixed(2)}%`;
                        }
                    })
                    rowData["image"] = (await strikeZone(list, type));
                    makeRow(rowData);
                }
            }


            /*
                FUNCTIONS 
            */
            async function hitDirections(list) {
                let zoneData = list["player a"]["hitLocation"]["zones"]["summary"];

                function findMax(zoneData, iter) {
                    let max = 0;
                    let num = 0;
                    for (let i = iter; i < 4 + iter; i++) {
                        let zone = `zone${i}`;
                        if (Number(zoneData[zone]) > max) {
                            max = Number(zoneData[zone]);
                            num = i;
                        }
                    }
                    return num;
                }

                let infieldHighPer = (findMax(zoneData, 1));
                let outfieldHighPer = (findMax(zoneData, 5));
                let ratio_ = 0.7;
                let app = new PIXI.Application({
                    width: 800 * ratio_,
                    height: 800 * ratio_,
                    antialias: true,
                    resolution: window.devicePixelRatio,
                    backgroundColor: 0x04981D,
                    autoDensity: true,
                });
                let { width, height } = app.screen;
                let div = document.createElement('div');
                // div.innerText = " Hits Percentage";
                div.id = "hitDirection";
                document.body.appendChild(div);
                document.querySelector('#hitDirection').appendChild(app.view);
                app.stage.sortableChildren = true;

                let lineSize = 2 * ratio_;
                let fontSize = 22 * ratio_;
                {
                    let radius = width * 0.65;
                    let num = 8;
                    let arcAngle = Math.PI * 0.5;
                    let sliceCount = 4;
                    let angle = arcAngle / sliceCount;
                    for (let i = 0; i < sliceCount; i++) {
                        let backgCol = num === outfieldHighPer ? 0xFF0000 : 0x808080;
                        let startAngle = Math.PI + ((Math.PI - arcAngle) / 2) + (angle * i);
                        var semicircle = new PIXI.Graphics();
                        semicircle.beginFill(backgCol);
                        semicircle.lineStyle(lineSize, 0xffffff);
                        semicircle.arc(0, 0, radius, startAngle, startAngle + angle, false);
                        semicircle.lineTo(0, 0);
                        let coord = ksttool.math.get_coordinate_distance_away_from_center_with_radian(radius, { x: 0, y: 0 }, startAngle + Math.PI);
                        semicircle.lineTo(coord.x, coord.y);
                        semicircle.x = width / 2;
                        semicircle.y = (height / 2) + radius * 0.5;
                        app.stage.addChild(semicircle);
                        {
                            let zone = zoneData[`zone${num}`];
                            let text = new PIXI.Text(`${zone}%`, { fontFamily: 'Arial', fontSize, fill: 0x1000000, align: 'center' });
                            text.x -= text.width / 2
                            text.y -= text.height / 2
                            let coord = ksttool.math.get_coordinate_distance_away_from_center_with_radian(radius * 0.85, { x: 0, y: 0 }, startAngle + angle / 2);
                            text.x -= coord.x;
                            text.y -= coord.y;
                            semicircle.addChild(text);
                        }
                        num -= 1;
                    }
                }
                {
                    let radius = width * 0.5;
                    let num = 4;
                    radius *= 0.7;
                    let arcAngle = Math.PI * 0.5;
                    let sliceCount = 4;
                    let angle = arcAngle / sliceCount;
                    for (let i = 0; i < sliceCount; i++) {
                        let backgCol = num === infieldHighPer ? 0xFF0000 : 0x808080;
                        let startAngle = Math.PI + ((Math.PI - arcAngle) / 2) + (angle * i);
                        var semicircle = new PIXI.Graphics();
                        semicircle.beginFill(backgCol);
                        semicircle.lineStyle(lineSize, 0xffffff);

                        semicircle.arc(0, 0, radius, startAngle, startAngle + angle, false);
                        semicircle.lineTo(0, 0);
                        let coord = ksttool.math.get_coordinate_distance_away_from_center_with_radian(radius, { x: 0, y: 0 }, startAngle + Math.PI);
                        semicircle.lineTo(coord.x, coord.y);
                        semicircle.x = width / 2;
                        semicircle.y = (height / 2) + (width * 0.65) * 0.5;
                        app.stage.addChild(semicircle);
                        {
                            let zone = zoneData[`zone${num}`];
                            let text = new PIXI.Text(`${zone}%`, { fontFamily: 'Arial', fontSize: 17, fill: 0x1000000, align: 'center' });
                            text.x -= text.width / 2
                            text.y -= text.height / 1
                            let coord = ksttool.math.get_coordinate_distance_away_from_center_with_radian(radius * 0.8, { x: 0, y: 0 }, startAngle + angle / 2);
                            text.x -= coord.x;
                            text.y -= coord.y;
                            semicircle.addChild(text);
                        }
                        num -= 1;
                    }
                }

                let zone = {
                    width: 180 * ratio_,
                    height: 240 * ratio_,
                };


                let circle = new PIXI.Graphics();
                circle.lineStyle(2 * ratio_, 0xFFFF00);
                circle.drawCircle((width / 1.55) - (zone.width / 2), height, 5);
                app.stage.addChild(circle);
                let ratio = 1 * ratio_;
                let gridColor = 0x000000;
                let thickness = 2 * ratio_;
                {
                    for (let i = 0; i < 9; i++) {
                        let dot = new PIXI.Graphics();
                        dot.beginFill(gridColor);
                        dot.drawRect(0, 0, width, thickness);
                        dot.endFill();
                        app.stage.addChild(dot);
                        dot.y = (i * 100 * ratio_) - (thickness * 0.5);
                        dot.alpha = 0.3;
                    }
                }
                {
                    for (let i = 0; i < 9; i++) {
                        let dot = new PIXI.Graphics();
                        dot.beginFill(gridColor);
                        dot.drawRect(0, 0, thickness, height);
                        dot.endFill();
                        app.stage.addChild(dot);
                        dot.x = (i * 100 * ratio_) - (thickness * 0.5);
                        dot.alpha = 0.3;
                    }
                }
            }
            //define Tabulator
            var tableRow = new Tabulator("#Player-Pitch-Types", {
                scrollToColumnIfVisible: false, //position column in the middle of the table when scrolled to
                scrollToRowIfVisible: false, //prevent scrolling to a row if it is visible
                layout: "fitColumns",
                columnDefaults: {
                    resizable: true,
                },
                data: cheeseData,
                columns: [
                    { title: "Player-Pitch-Types", field: "type", sorter: "string" },
                ],
                rowFormatter: function (row) {
                    var element = row.getElement(),
                        data = row.getData(),
                        width = element.offsetWidth,
                        rowTable, cellContents;

                    //clear current row data
                    while (element.firstChild) element.removeChild(element.firstChild);

                    //define a table layout structure and set width of row
                    rowTable = document.createElement("table")
                    rowTable.style.width = (800 - 18) + "px";

                    let rowTabletr = document.createElement("tr");

                    //add image on left of row
                    // cellContents = "<td><img src='/sample_data/row_formatter/" + data.image + "'></td>";
                    //text-align:center; margin:0 auto;
                    cellContents = "<td style=\"background:;\"><span style=\"background:#555;display:inline-block\"><img src='" + data.image + "'></span></td>";

                    //add row data on right hand side
                    cellContents += "<td><div><strong>Type:</strong> " + data.type + "</div><div><strong>avgMPH:</strong> " + data.avgMPH + "</div><div><strong>avgSpin:</strong> " + data.avgSpin + "</div><div><strong>Rate:</strong> " + data.rate + "</div></td>"

                    rowTabletr.innerHTML = cellContents;
                    rowTable.appendChild(rowTabletr);
                    //append newly formatted contents to the row
                    element.append(rowTable);
                },
            });

            function makePlayerInfoData(obj, name) {
                let player = name === undefined ? "player a" : name;
                let list = [];
                Object.keys(obj).forEach((elem, index) => {
                    let obj1 = {};
                    if (obj[elem]["playerInfo"]["name"] === player) {
                        obj1["id"] = index + 1;
                        obj1["name"] = obj[elem]["playerInfo"]["name"];
                        obj1["Throw"] = obj[elem]["playerInfo"]["throw"];
                        obj1["img"] = "<img src='https://www.w3schools.com/images/lamp.jpg' />";
                        obj1["TotalPA"] = obj[elem]["gameInfo"]["totalPlateAppearance"];
                        obj1["totalHits"] = obj[elem]["gameInfo"]["totalHits"];
                        obj1["totalWalk"] = obj[elem]["gameInfo"]["totalWalk"];
                        
                        let totalOut = obj[elem]["gameInfo"]["totalStrikeout"] + obj[elem]["gameInfo"]["groundBallOut"] +obj[elem]["gameInfo"]["totalFlyOut"] + obj[elem]["gameInfo"]["totalPopup"] +obj[elem]["gameInfo"]["totalLineDrive"];

                        obj1["totalStrikeout"] = ((obj[elem]["gameInfo"]["totalStrikeout"]/totalOut) *100 ).toFixed(2)
                        obj1["groundBallOut"] = ((obj[elem]["gameInfo"]["groundBallOut"]/totalOut) *100 ).toFixed(2)
                        obj1["totalFlyOut"] = ((obj[elem]["gameInfo"]["totalFlyOut"]/totalOut) *100 ).toFixed(2)
                        obj1["totalPopup"] = ((obj[elem]["gameInfo"]["totalPopup"]/totalOut) *100 ).toFixed(2)
                        obj1["totalLineDrive"] = ((obj[elem]["gameInfo"]["totalLineDrive"]/totalOut) *100 ).toFixed(2)
                        
                        list.push(obj1)
                    }

                })
                return (list);
            }

            function getPlayerInfoTable(list) {
                var table = new Tabulator("#example-table", {
                    layout: "fitColumns",
                    tooltips: true,
                    addRowPos: "top",
                    history: true,
                    pagination: "local",
                    paginationSize: 70,
                    movableColumns: true,
                    resizableRows: true,
                    columns: [
                        { title: "Name", field: "name", width: 160, editor: false },
                        { title: "Throw ", field: "Throw", width: 160, editor: false, editorParams: { "Right": "right", "Left": "left" } },
                        { title: "TotalPA ", field: "TotalPA", width: 160, editor: false },
                        { title: "TotalHits ", field: "totalHits", width: 160, editor: false },
                        { title: "TotalWalk ", field: "totalWalk", width: 160, editor: false },
                        { title: "Strikeout% ", field: "totalStrikeout", width: 160, editor: false },
                        { title: "GroundBallOut%", field: "groundBallOut", width: 160, editor: false },
                        { title: "FlyOut%", field: "totalFlyOut", width: 160, editor: false },
                        { title: "PopupOut%", field: "totalPopup", width: 160, editor: false },
                        { title: "LineDriveOut%", field: "totalLineDrive", width: 160, editor: false },
                        // { title: "Throw ", field: "gender", width: 150, editor: "select", editorParams: { "Right": "right", "Left": "left" } },
                        // { title: "Throw ", field: "gender", width: 150, editor: "select", editorParams: { "Right": "right", "Left": "left" } },
                        // { title: "Color", field: "col", width: 130, editor: "input" },
                        // { title: "Date Of Birth", field: "dob", width: 130, sorter: "date", align: "center" },
                        // { title: "Car", field: "car", width: 80, align: "center", formatter: "tickCross", sorter: "boolean", editor: true },
                    ],
                    data: makePlayerInfoData(list, "player a"),
                    // [
                    //     { id: 1, name: "Oli Bob", location: "United Kingdom", gender: "male", rating: 1, col: "red", dob: "14/04/1984" },
                    //     { id: 2, name: "Mary May", location: "Germany", gender: "female", rating: 2, col: "blue", dob: "14/05/1982" },
                    //     { id: 3, name: "Christine Lobowski", location: "France", gender: "female", rating: 0, col: "green", dob: "22/05/1982" },
                    //     { id: 4, name: "Brendon Philips", location: "USA", gender: "male", rating: 1, col: "orange", dob: "01/08/1980" },
                    //     { id: 5, name: "Margret Marmajuke", location: "Canada", gender: "female", rating: 5, col: "yellow", dob: "31/01/1999" },
                    //     { id: 6, name: "Frank Harbours", location: "Russia", gender: "male", rating: 4, col: "red", dob: "12/05/1966" },
                    //     { id: 7, name: "Jamie Newhart", location: "India", gender: "male", rating: 3, col: "green", dob: "14/05/1985" },
                    //     { id: 8, name: "Gemma Jane", location: "China", gender: "female", rating: 0, col: "red", dob: "22/05/1982" },
                    //     { id: 9, name: "Emily Sykes", location: "South Korea", gender: "female", rating: 1, col: "maroon", dob: "11/11/1970" },
                    //     { id: 10, name: "James Newman", location: "Japan", gender: "male", rating: 5, col: "red", dob: "22/03/1998" },
                    // ],
                    initialSort: [
                        { column: "name", dir: "asc" },
                    ],
                });
                table.on("dataProcessed", function (e, row) {
                    var firstRow = table.getRows()[0];
                    if (firstRow) {
                        firstRow.freeze();
                    }
                });
            }


            async function strikeZone(list, input) {
                let loc = list['player a'].location;
                let ballType = input === undefined ? Object.keys(loc).filter(key => !key.startsWith('avg_')) : input;
                let keys = ['plate_loc_side', 'plate_loc_height'];
                let idName = input === undefined ? "abcd" : `${input}`;
                let colorTable = {
                    Fastball: 0xff0f00, // up
                    Curveball: 0xffffff,
                    ChangeUp: 0xffff00, // down
                    Slider: 0x00ffff,
                    Cutter: 0xf0ffff,
                    Undefined: 0xf0ff0f,
                    Splitter: 0xf00f0f,
                };

                let ratio_ = 0.7;
                let app = new PIXI.Application({
                    width: 400 * ratio_,
                    height: 500 * ratio_,
                    antialias: true,
                    resolution: window.devicePixelRatio,
                    backgroundColor: 0x444444,
                    autoDensity: true,
                });
                let { width, height } = app.screen;
                let div = document.createElement('div');
                div.id = idName;
                document.body.appendChild(div);
                app.stage.sortableChildren = true;

                let zone = {
                    width: 180 * ratio_,
                    height: 240 * ratio_,
                };
                let circle = new PIXI.Graphics();
                circle.lineStyle(2 * ratio_, 0xFFFF00);
                circle.drawRect((width / 2) - (zone.width / 2), (height / 2) - (zone.height / 2), zone.width, zone.height);
                app.stage.addChild(circle);

                let fff = function (type) {
                    for (let i = 0; i < loc[type].plate_loc_side.length; i++) {
                        let side = (loc[type].plate_loc_side[i]);
                        let height_ = (loc[type].plate_loc_height[i]);
                        if (side === null || height_ === null) continue;
                        side = Number(side);
                        height_ = Number(height_);
                        if (isNaN(side) || isNaN(height_)) continue;

                        let radius = 2;
                        let xx = (width / 2) + (side * 100 * ratio);
                        let yy = (0) + height - (height_ * 100 * ratio)
                        if (
                            (xx <= width - (radius * ratio_) && xx >= 0 + (radius * ratio_)) &&
                            (yy <= height - (radius * ratio_) && yy >= 0 + (radius * ratio_))
                        ) {
                            let color = colorTable[type];
                            let dot = new PIXI.Graphics();
                            dot.beginFill(color);
                            dot.drawCircle(0, 0, radius * ratio_);
                            dot.endFill();
                            app.stage.addChild(dot);
                            dot.x = (width / 2) + (side * 100 * ratio);
                            dot.y = (0) + height - (height_ * 100 * ratio);
                        }
                    }
                }
                let ratio = 1 * ratio_;
                if (input === undefined) {
                    for (let i = 0; i < ballType.length; i++) {
                        fff(ballType[i]);
                    }
                } else {
                    fff(ballType);
                }

                let gridColor = 0x000000;
                let thickness = 2 * ratio_;
                {
                    for (let i = 0; i < 6; i++) {
                        let dot = new PIXI.Graphics();
                        dot.beginFill(gridColor);
                        dot.drawRect(0, 0, width, thickness);
                        dot.endFill();
                        app.stage.addChild(dot);
                        dot.y = (i * 100 * ratio_) - (thickness * 0.5);
                        dot.alpha = 0.3;
                    }
                }
                {
                    for (let i = 0; i < 5; i++) {
                        let dot = new PIXI.Graphics();
                        dot.beginFill(gridColor);
                        dot.drawRect(0, 0, thickness, height);
                        dot.endFill();
                        app.stage.addChild(dot);
                        dot.x = (i * 100 * ratio_) - (thickness * 0.5);
                        dot.alpha = 0.3;
                    }
                }
                let data = await new Promise(resolve => {
                    const download_sprite_as_png = function (sprite) {
                        let renderer = app.renderer;
                        renderer.extract.canvas(sprite).toBlob(function (b) {
                            var reader = new FileReader();
                            reader.readAsDataURL(b);
                            reader.onloadend = function () {
                                var base64data = reader.result;
                                resolve(base64data);
                            }
                        }, 'image/png');
                    }
                    download_sprite_as_png(app.stage);
                });
                return data;
            }
        });
    </script>

</head>

<body>
    <div id="example-table"></div>
    <div id="Player-Pitch-Types"></div>
    <div> Hits Directions & Percentage</div>
</body>

</html>